group 'com.secureftp'
version '0.1'

repositories {
    mavenCentral()
}

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.4'
    }
}

apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'java'

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
defaultTasks 'clean', 'client', 'server', 'register', 'distrib'
//create a single Jar with all dependencies

task client(type: ShadowJar) {
    group = "shadow" // Not a must have, but it's always good to have a group, you can chose whichever - this is the one shadowJar belongs to
    description = "Builds a Secure FTP Client executable jar" // Same as the above
    manifest.attributes 'Main-Class': 'com.secureftp.client.Client' // The main attraction! Be sure to update this line
    classifier = 'Client' // General jar task property - see more about it in the Gradle manual
    from(project.convention.getPlugin(JavaPluginConvention).sourceSets.main.output) // Leave as is
    configurations = [project.configurations.runtime] // Same as the above
    exclude('META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA') // This one is actually really important!
    archiveName = 'SecureFTP-Client.jar'
 // Here you can add other Jar properties like destinationDir, for example
}
task server(type: ShadowJar) {
    group = "shadow" // Not a must have, but it's always good to have a group, you can chose whichever - this is the one shadowJar belongs to
    description = "Builds a Secure FTP server executable jar" // Same as the above
    manifest.attributes 'Main-Class': 'com.secureftp.server.Server' // The main attraction! Be sure to update this line
    classifier = 'Server' // General jar task property - see more about it in the Gradle manual
    from(project.convention.getPlugin(JavaPluginConvention).sourceSets.main.output) // Leave as is
    configurations = [project.configurations.runtime] // Same as the above
    exclude('META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA') // This one is actually really important!
    archiveName = 'SecureFTP-Server.jar'
 // Here you can add other Jar properties like destinationDir, for example
}
task register(type: ShadowJar) {
    group = "shadow" // Not a must have, but it's always good to have a group, you can chose whichever - this is the one shadowJar belongs to
    description = "Builds a Secure FTP Registery tool executable jar" // Same as the above
    manifest.attributes 'Main-Class': 'com.secureftp.server.Register' // The main attraction! Be sure to update this line
    classifier = 'Register' // General jar task property - see more about it in the Gradle manual
    from(project.convention.getPlugin(JavaPluginConvention).sourceSets.main.output) // Leave as is
    configurations = [project.configurations.runtime] // Same as the above
    exclude('META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA') // This one is actually really important!
    archiveName = 'SecureFTP-Register.jar'
 // Here you can add other Jar properties like destinationDir, for example
}
task distrib {
    doLast {
        copy {
            from 'build/libs/.'
            into 'distrib/'
        }
    }
}
/*
task client(type: Jar) {
    exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA', 'META-INF/*.MF'
    manifest {
        attributes 'Implementation-Title': 'Secure FTP Client',  
            'Implementation-Version': version,
            'Main-Class': 'com.secureftp.client.Client'
    }
    baseName = 'SecureFTP-Client'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task server(type: Jar) {
    exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA', 'META-INF/*.MF'
    manifest {
        attributes 'Implementation-Title': 'Secure FTP Server',  
            'Implementation-Version': version,
            'Main-Class': 'com.secureftp.server.Server'
    }
    baseName = 'SecureFTP-Server'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}
*/

dependencies {
    // https://mvnrepository.com/artifact/org.bouncycastle/bcprov-jdk15on
    compile group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: '1.60'
    // https://mvnrepository.com/artifact/commons-cli/commons-cli
    compile group: 'commons-cli', name: 'commons-cli', version: '1.4'
    // https://mvnrepository.com/artifact/commons-codec/commons-codec/1.11
    compile group: 'commons-codec', name: 'commons-codec', version: '1.11'
    // https://mvnrepository.com/artifact/commons-io/commons-io/2.6
    compile group: 'commons-io', name: 'commons-io', version: '2.6'
    // https://mvnrepository.com/artifact/org.mindrot/jbcrypt
    compile group: 'org.mindrot', name: 'jbcrypt', version: '0.4'
}